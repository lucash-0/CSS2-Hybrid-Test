{"version":3,"sources":["pages/Menu.jsx","pages/Results.jsx","tests/StroopTest.jsx","tests/TrailTest.jsx","tests/HybridTest.jsx","App.js","serviceWorker.js","index.js"],"names":["Menu","props","state","Row","Col","sm","Card","body","className","CardTitle","CardText","Button","color","block","onClick","selectTest","inverse","Component","Results","stroopEvents","results","events","colours","words","start","lastTs","data","map","event","index","obj","word","colour","indexOf","toUpperCase","selected","selectedColor","outcome","type","elapsed","stamp","reaction","setState","trailsEvents","token","correctToken","text","selectedToken","hybridEvents","correctWord","correctColour","coltext","selectedWord","selectedColour","titles","stroop","trails","hybrid","headers","label","key","this","date","Date","Table","header","Object","values","val","scope","filename","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","target","Spinner","goBack","StroopTest","shuffle","arr1","arr2","i","length","j","Math","floor","random","onComplete","console","log","handleResults","onSuccess","onError","loading","combos","wordarr","colarr","lastrand","rand","round","push","lastword","lastcol","rand1","rand2","colors","timeLimit","completionMessage","TrailTest","progress","update","getTime","handleMiss","x","y","handleSuccess","prev","handleError","handleCompleted","stop","undefined","part","feedback","errorText","errorDuration","completedText","onMiss","onCompleted","HybridTest","App","sleep","ms","Promise","res","setTimeout","countdown","a","isLoading","test","selectedPage","goToPage","page","Container","size","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.780c009a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Card, Button, CardTitle, CardText, Row, Col } from \"reactstrap\";\n\nclass Menu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <Row>\n        <Col sm=\"4\">\n          <Card body className=\"h-100\">\n            <CardTitle className=\"h4\">Stroop Test</CardTitle>\n            <CardText>\n              The Stroop test is a classic clinical test of attentional\n              filtering. It is typically demonstrated as a reading versus color\n              naming task, where reading is more automatic and thus less\n              impacted.\n            </CardText>\n            <Row className=\"mt-auto\">\n              <Col>\n                <Button\n                  color=\"primary\"\n                  block\n                  onClick={() => this.props.selectTest(\"stroop\")}\n                >\n                  Play\n                </Button>\n              </Col>\n              <Col>\n                <Button color=\"secondary\" block>\n                  Instructions\n                </Button>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col sm=\"4\">\n          <Card body inverse color=\"warning\" className=\"h-100\">\n            <CardTitle className=\"h4\">Hybrid Test</CardTitle>\n            <CardText>\n              The Hybrid Test is a a cognitive test that incorporates qualities\n              of both the Stroop Test and the Trail Making Test. Our experiment\n              is to test the validity of this test against the Stroop and Trail\n              tests to use in further research.\n            </CardText>\n            <Row className=\"mt-auto\">\n              <Col>\n                <Button\n                  color=\"primary\"\n                  block\n                  onClick={() => this.props.selectTest(\"hybrid\")}\n                >\n                  Play\n                </Button>\n              </Col>\n              <Col>\n                <Button color=\"secondary\" block>\n                  Instructions\n                </Button>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col sm=\"4\">\n          <Card body className=\"h-100\">\n            <CardTitle className=\"h4\">Trail Test</CardTitle>\n            <CardText>\n              The Trail Making Test is a neuropsychological test of visual\n              attention and task switching. It consists of two parts in which\n              the subject is instructed to connect a set of numbered dots as\n              quickly as possible while still maintaining accuracy.\n            </CardText>\n            <Row className=\"mt-auto\">\n              <Col>\n                <Button\n                  color=\"primary\"\n                  block\n                  onClick={() => this.props.selectTest(\"trail\")}\n                >\n                  Play\n                </Button>\n              </Col>\n              <Col>\n                <Button color=\"secondary\" block>\n                  Instructions\n                </Button>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Menu;\n","import React, { Component } from \"react\";\n\nimport { Table, Button, Spinner } from \"reactstrap\";\n\nimport { CSVLink } from \"react-csv\";\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      titles: {\n        stroop: \"Stroop Results\",\n        trails: \"Trails Results\",\n        hybrid: \"Hybrid Test Results\",\n      },\n      headers: {\n        stroop: [\n          { label: \"Event\", key: \"event\" },\n          { label: \"Word\", key: \"word\" },\n          { label: \"Colour\", key: \"colour\" },\n          { label: \"Selected Colour\", key: \"selected\" },\n          { label: \"Outcome\", key: \"outcome\" },\n          { label: \"Time elapsed\", key: \"elapsed\" },\n          { label: \"Reaction time\", key: \"reaction\" },\n        ],\n        trails: [\n          { label: \"Event\", key: \"event\" },\n          { label: \"Token\", key: \"token\" },\n          { label: \"Selected Token\", key: \"selected\" },\n          { label: \"Outcome\", key: \"outcome\" },\n          { label: \"Time elapsed\", key: \"elapsed\" },\n          { label: \"Reaction time\", key: \"reaction\" },\n        ],\n        hybrid: [\n          { label: \"Event\", key: \"event\" },\n          { label: \"Correct Word\", key: \"correctWord\" },\n          { label: \"Correct Colour\", key: \"correctColour\" },\n          { label: \"Selected Word\", key: \"selectedWord\" },\n          { label: \"Selected Colour\", key: \"selectedColour\" },\n          { label: \"Outcome\", key: \"outcome\" },\n          { label: \"Time elapsed\", key: \"elapsed\" },\n          { label: \"Reaction time\", key: \"reaction\" },\n        ],\n      },\n      data: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.results.type === \"stroop\") {\n      this.stroopEvents(this.props.results.data);\n    } else if (this.props.results.type === \"trails\") {\n      this.trailsEvents(this.props.results.data);\n    } else if (this.props.results.type === \"hybrid\") {\n      this.hybridEvents(this.props.results.data);\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ data: null });\n  }\n\n  stroopEvents = (results) => {\n    const { events, colours, words, start } = results;\n    let lastTs = start;\n\n    const data = events.map((event, index) => {\n      let obj = {\n        event: index + 1,\n        word: event.word,\n        colour: words[colours.indexOf(event.color)].toUpperCase(),\n        selected: words[colours.indexOf(event.selectedColor)].toUpperCase(),\n        outcome: event.type,\n        elapsed: (event.stamp - start) / 1000,\n        reaction: (event.stamp - lastTs) / 1000,\n      };\n      lastTs = event.stamp;\n\n      return obj;\n    });\n\n    this.setState({ data });\n  };\n\n  trailsEvents = (results) => {\n    const { events, start } = results;\n    let lastTs = start;\n\n    const data = events.map((event, index) => {\n      let obj = {\n        event: index + 1,\n        token: event.correctToken.text,\n        selected: event.selectedToken.text,\n        outcome: event.type,\n        elapsed: (event.stamp - start) / 1000,\n        reaction: (event.stamp - lastTs) / 1000,\n      };\n      lastTs = event.stamp;\n\n      return obj;\n    });\n\n    this.setState({ data });\n  };\n\n  hybridEvents = (results) => {\n    const { events, start } = results;\n    let lastTs = start;\n\n    const data = events.map((event, index) => {\n      let obj = {\n        event: index + 1,\n        correctWord: event.correctToken.text,\n        correctColour: event.correctToken.coltext,\n        selectedWord: event.selectedToken.text,\n        selectedColour: event.selectedToken.coltext,\n        outcome: event.type,\n        elapsed: (event.stamp - start) / 1000,\n        reaction: (event.stamp - lastTs) / 1000,\n      };\n      lastTs = event.stamp;\n\n      return obj;\n    });\n\n    this.setState({ data });\n  };\n\n  render() {\n    //const {date } = this.state;\n    const date = new Date();\n    return (\n      <div>\n        <h3 className=\"mb-3\">\n          {this.props.results\n            ? this.state.titles[this.props.results.type]\n            : \"Results\"}\n        </h3>\n        <Table>\n          <thead>\n            <tr>\n              {this.state.headers[this.props.results.type].map((header) => {\n                return <th key={header.key}>{header.label}</th>;\n              })}\n            </tr>\n          </thead>\n          {this.state.data ? (\n            <tbody>\n              {this.state.data.map((event) => {\n                return (\n                  <tr key={event.event}>\n                    {Object.values(event).map((val, index) => {\n                      if (index === 0) {\n                        return (\n                          <th scope=\"row\" key={index}>\n                            {val}\n                          </th>\n                        );\n                      } else {\n                        return <td key={index}>{val}</td>;\n                      }\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          ) : null}\n        </Table>\n        <div className=\"mb-2\">\n          {this.state.data ? (\n            <CSVLink\n              data={this.state.data}\n              headers={this.state.headers[this.props.results.type]}\n              filename={`${\n                this.props.results.type\n              }_${date.getDate()}-${date.getMonth()}-${date.getFullYear()}_${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}.csv`}\n              className=\"btn btn-primary btn-lg\"\n              target=\"_blank\"\n            >\n              Download CSV\n            </CSVLink>\n          ) : (\n            <Spinner />\n          )}\n        </div>\n\n        <Button onClick={this.props.goBack} color=\"secondary\" className=\"mb-3\">\n          Go Back\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import React, { Component } from \"react\";\n\nimport Stroop from \"@orcatech/react-neuropsych-stroop\";\n\nclass StroopTest extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      words: null,\n      colours: null,\n      combos: null,\n    };\n\n    this.data = {\n      words: [\"green\", \"red\", \"blue\", \"orange\", \"purple\", \"yellow\"],\n      colours: [\"00FF00\", \"FF0000\", \"0000FF\", \"FF7F00\", \"800080\", \"FFFF00\"],\n      combos: null,\n    };\n  }\n\n  shuffle = (arr1, arr2) => {\n    for (let i = arr1.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [arr1[i], arr1[j]] = [arr1[j], arr1[i]];\n      [arr2[i], arr2[j]] = [arr2[j], arr2[i]];\n    }\n  };\n\n  onComplete = (data) => {\n    // handle test completion\n    //const { errors, successes, begin, finish, timeLimitReached } = data;\n    const { words, colours } = this.state;\n\n    console.log({ ...data, colours, words });\n    this.props.handleResults({\n      results: { type: \"stroop\", data: { ...data, colours, words } },\n    });\n  };\n\n  onSuccess = (data) => {\n    // handle each success that occurs\n  };\n\n  onError = (data) => {\n    // handle each error that occurs\n  };\n\n  componentDidMount() {\n    let wordarr = this.data.words;\n    //console.log(wordarr);\n    let colarr = this.data.colours;\n    //console.log(colarr);\n    this.shuffle(wordarr, colarr);\n    //console.log(wordarr);\n    //console.log(colarr);\n\n    let combos = [];\n\n    let lastrand;\n    for (let i = 0; i < 3; i++) {\n      let rand = Math.round(0 + Math.random() * (wordarr.length - 1));\n      while (lastrand === rand) {\n        rand = Math.round(0 + Math.random() * (wordarr.length - 1));\n      }\n      lastrand = rand;\n      combos.push({ word: rand, color: rand });\n    }\n\n    let i = 3;\n    let lastword;\n    let lastcol;\n    while (i <= 12) {\n      const rand1 = Math.round(0 + Math.random() * (wordarr.length - 1));\n      const rand2 = Math.round(0 + Math.random() * (wordarr.length - 1));\n      if (rand1 !== rand2 && rand1 !== lastword && rand2 !== lastcol) {\n        lastword = rand1;\n        lastcol = rand2;\n        combos.push({ word: rand1, color: rand2 });\n        i++;\n      }\n    }\n\n    //console.log(combos);\n\n    this.setState({\n      words: wordarr,\n      colours: colarr,\n      combos: combos,\n      loading: false,\n    });\n  }\n\n  componentWillUnmount() {\n    this.setState({ loading: true });\n  }\n\n  render() {\n    const { loading, words, colours, combos } = this.state;\n    if (loading) return null;\n    return (\n      <Stroop\n        colors={colours}\n        combos={combos}\n        onComplete={this.onComplete}\n        onError={this.onError}\n        onSuccess={this.onSuccess}\n        words={words}\n        timeLimit={300000}\n        completionMessage=\"Completed! Please select the results button above.\"\n      />\n    );\n  }\n}\n\nexport default StroopTest;\n","import React from \"react\";\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Trails from \"@lucash-0/react-neuropsych-trails\";\n\nclass TrailTest extends Component {\n  static propTypes = {\n    part: PropTypes.string.isRequired,\n  };\n\n  state = {\n    progress: 0,\n  };\n\n  constructor(props) {\n    super(props);\n    this.data = {\n      start: undefined,\n      stop: undefined,\n      events: [],\n    };\n  }\n\n  componentDidMount() {\n    this.data.start = new Date().getTime();\n  }\n\n  update = (type, date, correctToken, selectedToken) => {\n    this.data.events.push({\n      stamp: date.getTime(),\n      type: type,\n      correctToken: correctToken,\n      selectedToken: selectedToken,\n    });\n    console.log(this.data.events[this.data.events.length - 1]);\n  };\n\n  handleMiss = (date, correctToken, x, y) => {\n    this.update(\"Miss\", date, correctToken, { text: \"\", x: x, y: y });\n  };\n\n  handleSuccess = (date, token) => {\n    this.update(\"Success\", date, token, token);\n    this.setState((prev) => ({ progress: prev.progress + 1 }));\n  };\n\n  handleError = (date, correctToken, selectedToken) => {\n    this.update(\"Error\", date, correctToken, selectedToken);\n  };\n\n  handleCompleted = (date) => {\n    this.data.stop = date.getTime();\n    console.log(\"Trails Data:\");\n    console.log(this.data);\n\n    this.props.handleResults({ results: { data: this.data, type: \"trails\" } });\n  };\n\n  render() {\n    return (\n      <Trails\n        part={this.props.part}\n        progress={this.state.progress}\n        feedback={true}\n        errorText=\"X\"\n        errorDuration={500}\n        completedText={\"Completed! Please press the view results button\"}\n        onSuccess={this.handleSuccess}\n        onError={this.handleError}\n        onMiss={this.handleMiss}\n        onCompleted={this.handleCompleted}\n      />\n    );\n  }\n}\n\nexport default TrailTest;\n","import React from \"react\";\nimport { Component } from \"react\";\n//import PropTypes from \"prop-types\";\nimport Hybrid from \"@lucash-0/react-stroop-trails-hybrid\";\n\nclass HybridTest extends Component {\n  state = {\n    progress: 0,\n  };\n\n  constructor(props) {\n    super(props);\n    this.data = {\n      start: undefined,\n      stop: undefined,\n      events: [],\n    };\n  }\n\n  componentDidMount() {\n    this.data.start = new Date().getTime();\n  }\n\n  update = (type, date, correctToken, selectedToken) => {\n    this.data.events.push({\n      stamp: date.getTime(),\n      type: type,\n      correctToken: correctToken,\n      selectedToken: selectedToken,\n    });\n    console.log(this.data.events[this.data.events.length - 1]);\n  };\n\n  handleMiss = (date, correctToken, x, y) => {\n    this.update(\"Miss\", date, correctToken, { text: \"\", x: x, y: y });\n  };\n\n  handleSuccess = (date, token) => {\n    this.update(\"Success\", date, token, token);\n    this.setState((prev) => ({ progress: prev.progress + 1 }));\n  };\n\n  handleError = (date, correctToken, selectedToken) => {\n    this.update(\"Error\", date, correctToken, selectedToken);\n  };\n\n  handleCompleted = (date) => {\n    this.data.stop = date.getTime();\n    console.log(\"Hybrid Data:\");\n    console.log(this.data);\n\n    this.props.handleResults({ results: { data: this.data, type: \"hybrid\" } });\n  };\n\n  render() {\n    return (\n      <Hybrid\n        //part={this.props.part}\n        progress={this.state.progress}\n        feedback={true}\n        errorText=\"X\"\n        errorDuration={500}\n        completedText={\"Completed! Please press the view results button\"}\n        onSuccess={this.handleSuccess}\n        onError={this.handleError}\n        onMiss={this.handleMiss}\n        onCompleted={this.handleCompleted}\n      />\n    );\n  }\n}\n\nexport default HybridTest;\n","import React from \"react\";\nimport { Component } from \"react\";\n\nimport Menu from \"./pages/Menu\";\nimport Results from \"./pages/Results\";\n\nimport StroopTest from \"./tests/StroopTest\";\nimport TrailTest from \"./tests/TrailTest\";\nimport HybridTest from \"./tests/HybridTest\";\n\nimport \"./App.css\";\nimport { Container, Card, CardBody, Button } from \"reactstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedPage: \"menu\",\n      isLoading: false,\n      countdown: null,\n      results: null,\n    };\n  }\n\n  sleep = (ms) => new Promise((res) => setTimeout(res, ms));\n\n  countdown = async () => {\n    this.setState({ isLoading: true, countdown: 3 });\n    await this.sleep(1000);\n    this.setState({ countdown: 2 });\n    await this.sleep(1000);\n    this.setState({ countdown: 1 });\n    await this.sleep(1000);\n    this.setState({ isLoading: false, countdown: 0 });\n  };\n\n  selectTest = (test) => {\n    this.countdown();\n    this.setState({ selectedPage: test });\n  };\n\n  goBack = () => {\n    this.setState({ selectedPage: \"menu\", results: null });\n  };\n\n  goToPage = (page) => {\n    this.setState({ selectedPage: page });\n  };\n\n  handleResults = (results) => {\n    this.setState(results);\n  };\n\n  componentDidMount() {\n    //this.countdown();\n  }\n\n  render() {\n    const { isLoading, countdown, selectedPage, results } = this.state;\n\n    if (isLoading) {\n      return (\n        <div className=\"loading\">\n          <div className=\"loading-centre\">\n            <h1 className=\"display-1 text-center\">{countdown}</h1>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Container className=\"text-center\">\n        <div className=\"mb-5\">\n          <h1 className=\"display-3\">CSS2 Hybrid Test Experiment</h1>\n        </div>\n\n        {results ? (\n          <Button\n            size=\"lg\"\n            color=\"primary\"\n            className=\"mb-3\"\n            onClick={() => this.goToPage(\"results\")}\n          >\n            View Results\n          </Button>\n        ) : null}\n\n        {selectedPage === \"menu\" ? (\n          <Menu selectTest={this.selectTest} />\n        ) : (\n          <Card\n            className={`test-card mx-auto ${\n              selectedPage === \"results\" ? \"border-0\" : null\n            }`}\n          >\n            <CardBody>\n              {selectedPage === \"stroop\" ? (\n                <StroopTest handleResults={this.handleResults} />\n              ) : null}\n              {selectedPage === \"trail\" ? (\n                <TrailTest part=\"A12\" handleResults={this.handleResults} />\n              ) : null}\n              {selectedPage === \"hybrid\" ? (\n                <HybridTest handleResults={this.handleResults} />\n              ) : null}\n              {selectedPage === \"results\" ? (\n                <Results results={results} goBack={this.goBack} />\n              ) : null}\n            </CardBody>\n          </Card>\n        )}\n        {selectedPage === \"menu\" ? (\n          <p className=\"text-monospace text-center mt-3 text-muted\">v1.0.2</p>\n        ) : null}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}